// <auto-generated />
using System;
using CRMSystem.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRMSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230205014357__third")]
    partial class _third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("CRMSystem.Domain.Entities.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExtraditionPassportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("INN")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsPublicOfficialPerson")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPublicOfficialPersonOrRelative")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("longtext");

                    b.Property<double?>("PercentShare")
                        .HasColumnType("double");

                    b.Property<string>("RegistrationAdress")
                        .HasColumnType("longtext");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("SNILS")
                        .HasColumnType("longtext");

                    b.Property<string>("WhoGivesPassport")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("CRMSystem.Domain.Entities.ExecutiveDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExtraditionPassportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("INN")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsPublicOfficialPerson")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPublicOfficialPersonRelative")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("longtext");

                    b.Property<double?>("PercentShare")
                        .HasColumnType("double");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.Property<string>("RegistrationAdress")
                        .HasColumnType("longtext");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("SNILS")
                        .HasColumnType("longtext");

                    b.Property<string>("WhoGivesPassport")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ExecutiveDepartments");
                });

            modelBuilder.Entity("CRMSystem.Domain.Entities.OrganizationFounder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("INN")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsResident")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrganizationFounders");
                });

            modelBuilder.Entity("CRMSystem.Domain.Entities.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("CRMSystem.Domain.Entities.RequestInformation", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("AmountOfMoney")
                        .HasColumnType("double");

                    b.Property<string>("ContractObject")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EntityOfRussia")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsPrepayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RegionOfWork")
                        .HasColumnType("longtext");

                    b.Property<string>("RequestCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SigningContractDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("StartMaxPrice")
                        .HasColumnType("double");

                    b.HasKey("RequestId");

                    b.ToTable("RequestInformation");
                });

            modelBuilder.Entity("CRMSystem.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("CRMSystem.Domain.Entities.Requester", b =>
                {
                    b.Property<int>("RequesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActualAdress")
                        .HasColumnType("longtext");

                    b.Property<string>("BIK")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("COntactEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondentBankAccount")
                        .HasColumnType("longtext");

                    b.Property<int?>("EmployeesNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("HasLicence")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("INN")
                        .HasColumnType("longtext");

                    b.Property<bool?>("InLicvidationProcess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsStraregicEnterprise")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KPP")
                        .HasColumnType("longtext");

                    b.Property<string>("LegalAdress")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentAccountNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.Property<bool?>("WebsiteExistence")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("hasCreditProducts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("hasDebtFiles")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("hasFederalDebt")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("hasSalaryDebt")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("RequesterId");

                    b.ToTable("Requesters");
                });

            modelBuilder.Entity("CRMSystem.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a815df5a-a254-4076-aaf3-5c9f7d58f408",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f944139-a4dd-4f80-a0d6-e3845a4f1f4e",
                            Email = "my@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MY@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECfVPmzumYLDjlH6YAJLAKt6Sl0+f3nn6UwdJKmDe/juKjLpK5COpEfx2Ud2+O5RBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "7c9d381a-f2bc-4a7e-967f-a5c17bed883c",
                            ConcurrencyStamp = "7bd0ae82-3c8c-455a-acdd-3a23f085f586",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a815df5a-a254-4076-aaf3-5c9f7d58f408",
                            RoleId = "7c9d381a-f2bc-4a7e-967f-a5c17bed883c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CRMSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CRMSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CRMSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
